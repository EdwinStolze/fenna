<?php
//include '../Mailer/Mailer.class.php' ;

class Registration extends WireData implements Module {

    private $form ;
    private $myFields = array();
    private $myValues = array();
    private $results = array();
    private $userEmail = "" ;

    protected static $defaultConfigData = array(
        'successPage' => '/',
        'to' => '',
        'toName' => '',
        'from' => 'fenna@fennavdbergcoaching.nl',
        'fromName' => 'fennavdbergcoaching',
        'subjectPrefix' => "Inschrijving training",
        'htmlEmail' => false,
        'sendConfirmation' => true,
        'generalErrorMessage' => "De onderstaande velden zijn niet goed invuld.",
        'mailTemplate' => " Geachte {value:Uw_naam},\n\nDe volgende gegevens zijn ingevoerd:\n{loop:start} {key} : {value}\n {loop:end}\nMet vriendelijke groet,\nVicrea ",
        'mailTemplateConfirmation' => " Geachte {value:Uw_naam},\n\nDe volgende gegevens zijn ingevoerd:\n{loop:start} {key} : {value}\n {loop:end}\nMet vriendelijke groet,\nVicrea "
        ); 

    // public function install() {s
    //     parent::___install();
    //     $q = "CREATE TABLE `registrations` (
    //           `id` int(9) NOT NULL AUTO_INCREMENT,
    //           `date` datetime NOT NULL,
    //           `data` text NOT NULL,
    //           PRIMARY KEY (`id`)
    //     )" ;
    //     $this->db->query($q) ;
    // }

    /**
     * Set the default config data
     */
    public function __construct() {
        foreach(self::$defaultConfigData as $key => $value) {
            $this->set($key, $value); 
        }
    }

    public static function getModuleInfo() {

        return array(
            'title' => 'Registration Module voor inschrijvingen', 
            'version' => 101, 
            'summary' => 'Creeert een inschrijfformulier mail deze & slaat deze op in db ',
            'singular' => false, 
            'autoload' => false, 
            );
    }

    public function init() {
        $this->form = $this->fuel->modules->get("InputfieldForm");
        $this->form->action = "./";
        $this->form->method = "POST";
        $this->form->attr("id+name",'subscribe-form');
    }

    public function config ($key, $value) {
        self::$defaultConfigData[$key] = $value ;
    }

    public function inputAdd($name, $type, $required, $value='') {

        switch ( $type ) {
            case 'text' :
                $field = $this->fuel->modules->get("InputfieldText");
            break;
            case 'textarea' :
                $field = $this->fuel->modules->get("InputfieldTextarea");
            break;
            case 'hidden' :
                $field = $this->fuel->modules->get("InputfieldHidden");
            break;
            case 'email' :
                $field = $this->fuel->modules->get("InputfieldEmail");
            break;
        }

        $field->attr('id+name', $this->clean($name));
        $field->required = $required ;
        $field->required = 0 ;
        $field->attr('value', $value) ;
        if ($type != "hidden") $field->label = $name  ;
        $this->form->append($field);
        $this->myFields[] = $field ;
    }

    /*
    *   Voeg data toe voor buiten de formulieren
    */
    public function valueAdd($key, $value) {
        $this->myValues[$this->clean($key)] = $value ;
    }

    /*
    *   Process binnengkomen form data.
    *   Indien binnengekomen dan ook mailen en opslaan.
    *   Zorgt er ook voor data results array wordt gevuld.
    */
    private function processForm() {

        $input = $this->fuel->input;
        if( $input->post('submit')) {
            $this->form->processInput($input->post);
            foreach ( $this->myFields as $field ) {
                // $this->results[$field->name] = $input->post[$field->name] ;
                // Capture user email for later use
                if ( $field == "InputfieldEmail" ) {
                    $this->results[$field->name] = $this->sanitizer->email( $input->post[$field->name]);
                    $this->userEmail = $this->results[$field->name] ;
                }
                if ( $field == "InputfieldText" ) {
                    if ($field->name == 'email') {
                        $this->userEmail = $input->post[$field->name];
                    }
                    $this->results[$field->name] = $this->sanitizer->text( $input->post[$field->name]); 
                }
                if ( $field == "InputfieldTextarea" ) $this->results[$field->name] = $this->sanitizer->textarea( $input->post[$field->name]);
            }

            if ($this->form->getErrors()) {
                return false ;  
            } else {
                if ( $input->post['myadress'] == "" ) {
                    $this->toDatabase() ;
                    $this->runMail() ;
                    if (!empty(self::$defaultConfigData['successPage'])) 
                         $this->session->redirect(self::$defaultConfigData['successPage']);
                }
            }
        } 

        return $this->results ;
    }

    /*
    *   Maak namen schoon zodat deze gebruikt kunnen worden als objectnamen
    */
    private function clean($name) {
        $name = trim($name) ;
        $name = str_replace(' ', '_', $name);
        return $name ;
    }

    private function unclean($name) {
        $name = str_replace('_', ' ', $name);
        return $name ;
    }


    public function render() {

            // Honeypot 
            $field = $this->modules->get("InputfieldText");
            $field->attr("id+name","myadress");
            // $submit->attr("class","wrap_myadress");
            $this->form->append($field);

            // Submit button
            $submit = $this->modules->get("InputfieldSubmit");
            $submit->attr("value","Verzend");
            $submit->attr("id+name","submit");
            $submit->label = "Verzend uw registratie";
            $this->form->append($submit);

            // Render
            $this->processForm();

            // Custom form
            $formName = $this->form->name ;
            $formAction = $this->form->action ;
            $form = "<form id='{$this->form->id}' class=' t-footer-form {$this->form->class}' name='{$formName}' method='{$this->form->method}' action='{$formAction}' data-colspacing='1'> " ;
            $form .= "<fieldset><legend>Contact</legend>";
            // $form .= "<ul> "  ;
            foreach($this->form as $key => $value) {
                $errors = $value->getErrors(true); 
                $errorMessage = ($errors) ? "<span>{$errors[0]}</span>" : "" ;
                $errorMessage = str_replace("Missing required value", "Verplichte invoer ontbreekt", $errorMessage) ;
                $errorMessage = str_replace("Please enter a valid e-mail address", "Email niet geldig", $errorMessage) ;
                $errorClass = ($errors) ? " ui-state-error InputfieldStateError " : "" ;

                switch ($value) {
                    case 'InputfieldSubmit' :
                        $form .= "<p id='wrap_{$value->name}' class='{$value->class}'>
                                      <button id='{$value->type}' name='{$value->name}' value='{$value->value}' type='{$value->type}'><span class='ui-button-text'>{$value->value}</span></button>
                                  </p>" ;
                    break ;
                    case 'InputfieldTextarea' :
                        $form .= "<p id='wrap_{$value->name}' class='{$value->class} {$errorClass}'>
                                      <label for='{$value->name}'>{$value->label}</label>
                                      <textarea id='{$value->name}' class='formfield' name='{$value->name}' rows='5'>{$value->value}</textarea>
                                      {$errorMessage}
                                  </p>" ;
                    break ;
                    default :
                        $form .= "<p id='wrap_{$value->name}' class='{$value->class} {$errorClass}'>
                                      <label for='{$value->name}'>{$value->label}</label>
                                      <input id='{$value->name}' name='{$value->name}' value='{$value->value}' class='formfield required ' type='{$value->type}'>
                                      {$errorMessage}
                                  </p>" ;
                }
            }
            // $form .= "</ul> " ;
            $form .= "</fieldset>";
            $tokenName = wire('session')->CSRF->getTokenName();
            $tokenValue = wire('session')->CSRF->getTokenValue();
            $form .= "<input type='hidden' id='_post_token' name='$tokenName' value='$tokenValue' />";
            $form .= "</form> " ;

            echo $form ;
    }

    public function runMail(){

        $mailer = $this->modules->get("Mailer") ;
        $message = $mailer->createTemplate(self::$defaultConfigData['mailTemplate'] ,$this->allResults()) ; 
        $mailer->to(self::$defaultConfigData['to']);
        $mailer->toName(self::$defaultConfigData['toName']);
        $mailer->from(self::$defaultConfigData['from']);
        $mailer->fromName(self::$defaultConfigData['fromName']);
        $mailer->subject(self::$defaultConfigData['subjectPrefix']) ;
        if (self::$defaultConfigData['htmlEmail'] == true ) {
            $mailer->bodyHTML($message);
        } else {
            $mailer->body($message);
        }
        // Mail Fenna 
        $mailer->send();

        // Mail confirmation
        if ( self::$defaultConfigData['sendConfirmation'] == true ) {
            $message = $mailer->createTemplate(self::$defaultConfigData['mailTemplateConfirmation'] ,$this->allResults()) ; 
            $mailer->to($this->userEmail);
            if (self::$defaultConfigData['htmlEmail'] == true ) {
                $mailer->bodyHTML($message);
            } else {
                $mailer->body($message);
            }
        }
        // Mail subscriber
        $mailer->send();
    }

    /* 
    *  Vul alle entries in in de registrations database
    */
    public function toDatabase() {
        try {
            $data = json_encode($this->allResults()) ;
            $this->db->query("INSERT INTO registrations (date, data) VALUES (NOW(), '{$data}')");
        } catch (Exception $e) {
            //echo 'Caught exception: ',  $e->getMessage(), "\n";
        }
    }

    //Get array of Results
    public function allResults () {
        $a = $this->results ;
        $a = array_merge($a, $this->myValues ) ;
        
        return $a ;
    }

}
